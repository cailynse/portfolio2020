{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","className","Delay","ms","Backspace","count","delay","id","src","alt","href","icon","faGithub","color","size","faTwitter","faLinkedinIn","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wOAqFeA,MA/Ef,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,IAAD,KACI,0BAAMA,UAAU,SAAhB,YAAiC,0BAAMA,UAAU,aAAhB,UAAjC,0CACF,kBAAC,IAAOC,MAAR,CAAcC,GAAI,MAClB,6BACA,kBAAC,IAAOD,MAAR,CAAcC,GAAI,MAClB,0BAAMF,UAAU,UAAhB,yDACA,kBAAC,IAAOG,UAAR,CAAkBC,MAAO,GAAIC,MAAO,MACpC,0BAAML,UAAU,UAAhB,gCACA,kBAAC,IAAOG,UAAR,CAAkBC,MAAO,GAAIC,MAAO,MACpC,0BAAML,UAAU,UAAhB,8BACA,kBAAC,IAAOG,UAAR,CAAkBC,MAAO,GAAIC,MAAO,MACpC,0BAAML,UAAU,oBAAhB,sDACA,6BACA,uDAIJ,yBAAKM,GAAG,QAAQN,UAAU,aACxB,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKM,GAAG,YAAYC,IAAI,cAAcC,IAAI,mBAE5C,yBAAKR,UAAU,UACb,yBAAKM,GAAG,cACN,6BACE,oCACA,6BAAK,0BAAMN,UAAU,aAAhB,UAAL,sBACA,6BAAK,0BAAMA,UAAU,aAAhB,gBAAL,OACA,mCACA,mCAAQ,0BAAMA,UAAU,aAAhB,cAAR,eACA,mCAAQ,0BAAMA,UAAU,aAAhB,UAAR,wBACA,mCAAQ,0BAAMA,UAAU,aAAhB,UAAR,8BACA,oCACA,mCACA,mCAAQ,0BAAMA,UAAU,aAAhB,cAAR,eACA,mCAAQ,0BAAMA,UAAU,aAAhB,UAAR,wBACA,mCAAQ,0BAAMA,UAAU,aAAhB,UAAR,iCACA,mCACA,mCACA,6BAAK,0BAAMA,UAAU,aAAhB,eAAL,6CACA,6BAAK,0BAAMA,UAAU,aAAhB,eAAL,MACE,4CACA,oDACA,2CACA,wCACA,yCACA,0CACA,6CACA,+CACA,qCACF,iCAAM,0BAAMA,UAAU,aAAhB,iBAAN,MACE,iDACA,4DACA,0CACA,6CACA,+CACA,8CACA,gDACA,8CACA,oCACF,uCAMN,yBAAKM,GAAG,cACN,uBAAGG,KAAK,+BAA8B,kBAAC,IAAD,CAAiBC,KAAMC,IAAUC,MAAM,UAAUC,KAAK,QAC5F,uBAAGJ,KAAK,qCAAoC,kBAAC,IAAD,CAAiBC,KAAMI,IAAWF,MAAM,UAAUC,KAAK,QACnG,uBAAGJ,KAAK,wDAAuD,kBAAC,IAAD,CAAiBC,KAAMK,IAAcH,MAAM,UAAUC,KAAK,WCnEjHG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7f656e56.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Typist from 'react-typist';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub, faTwitter, faLinkedinIn } from '@fortawesome/free-brands-svg-icons'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Typist>\n            <span className=\"intro\"> Hi! I'm <span className=\"highlight\">Cailyn</span> - a fullstack developer from Canada! </span>\n          <Typist.Delay ms={500} />\n          <br />\n          <Typist.Delay ms={500} />\n          <span className=\"medium\">I spend my time working on my computer science degree</span>\n          <Typist.Backspace count={27} delay={200} />\n          <span className=\"medium\"> amazing projects at Shopify</span>\n          <Typist.Backspace count={28} delay={200} />\n          <span className=\"medium\"> personal passion projects</span>\n          <Typist.Backspace count={25} delay={200} />\n          <span className=\"medium highlight\"> building cool stuff and learning all the things! </span>\n          <br />\n          <span> Nice to meet you! </span>\n        </Typist>\n      </header>\n\n      <div id=\"photo\" className=\"container\">\n        <div className=\"row\">\n          <div className=\"column\">\n            <img id=\"mainphoto\" src=\"cailyn1.jpg\" alt=\"CailynEdwards\"></img>\n            </div>\n          <div className=\"column\">\n            <div id=\"cailynJSON\">\n              <pre>\n                <pre>\t&#123; </pre>\n                <pre><span className=\"highlight\">\"Name\"</span>:\"Cailyn Edwards\",</pre>\n                <pre><span className=\"highlight\">\"Experience\"</span>:[ </pre>\n                <pre> &#123;</pre>\n                <pre>   <span className=\"highlight\">\"Employer\"</span>:\"Shopify\",</pre>\n                <pre>   <span className=\"highlight\">\"Role\"</span>:\"Dev Degree Intern\"</pre>\n                <pre>   <span className=\"highlight\">\"Team\"</span>:\"Infrastructure Security\"</pre>\n                <pre> &#125;,</pre>\n                <pre> &#123;</pre>\n                <pre>   <span className=\"highlight\">\"Employer\"</span>:\"Shopify\",</pre>\n                <pre>   <span className=\"highlight\">\"Role\"</span>:\"Dev Degree Intern\"</pre>\n                <pre>   <span className=\"highlight\">\"Team\"</span>:\"Orders - Backend Developer\"</pre>\n                <pre> &#125;</pre>\n                <pre>],</pre>\n                <pre><span className=\"highlight\">\"Education\"</span>:\"BCS Carleton University Class of 2021\",</pre>\n                <pre><span className=\"highlight\">\"Languages\"</span>:[</pre>\n                  <pre>  \"GoLang\",</pre> \n                  <pre>  \"Ruby on Rails\", </pre>\n                  <pre>  \"Java\", </pre>\n                  <pre>  \"C\", </pre>\n                  <pre>  \"C#\", </pre>\n                  <pre>  \"C++\", </pre>\n                  <pre>  \"Python\", </pre>\n                  <pre>  \"JavaScript\"</pre>\n                  <pre>  ],</pre>\n                <pre>\"<span className=\"highlight\">Technologies\"</span>:[</pre>\n                  <pre>  \"Kubernetes\", </pre>\n                  <pre>  \"Google Cloud Platform\", </pre>\n                  <pre>  \"Git\", </pre>\n                  <pre>  \"Shipit\", </pre>\n                  <pre>  \"Longboat\", </pre>\n                  <pre>  \"Bugsnag\", </pre>\n                  <pre>  \"MySQL Pro\", </pre>\n                  <pre>  \"Insomnia\" </pre>\n                  <pre>  ]</pre>\n                <pre>&#125;</pre>\n              </pre>\n            </div>\n          </div>\n          </div>\n          </div>\n          <div id=\"mediaLinks\">\n            <a href=\"https://github.com/cailynse\"><FontAwesomeIcon icon={faGithub} color=\"#78BCB5\" size='3x'/></a>\n            <a href=\"https://twitter.com/CailynEdwards\"><FontAwesomeIcon icon={faTwitter} color=\"#78BCB5\" size='3x'/></a>\n            <a href=\"https://www.linkedin.com/in/cailyn-edwards-24b8a086/\"><FontAwesomeIcon icon={faLinkedinIn} color=\"#78BCB5\" size='3x'/></a>\n          </div>\n        </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}